// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    	// C-Instruction decoding
    	And16(a=instruction, b=true,  out[15]=opcode, out[12]=ca,
	      out[11]=c1, out[10]=c2, out[9] =c3, out[8]=c4, out[7]=c5,
              out[6] =c6, out[5]=writeA, out[4]=writeD, out[3]=writeM1, 
	      out[2]=j1, out[1] =j2, out[0] =j3);
       
	// writeM is true iff it is a C-instruction and d3==1
        And(a=writeM1, b=opcode, out=writeM);

    	// A Register logic
    	Mux16(a=instruction, b=aluout, sel=opcode, out=aregin);
	Not(in=opcode, out=negopcode);
	// Load address to ARegister if it is an A-Instruction or d1==1
	Or(a=negopcode, b=writeA, out=aload);
	ARegister(in=aregin, load=aload, out=aregout, out[0..14]=addressM);

	// D Register logic - similar to A Register
	And(a=writeD, b=opcode, out=dload);
    	DRegister(in=aluout, load=dload, out=dregout);

	// ALU logic
	// The a-bit in the C-Instruction determines whether to handle
	// A value or M value. This bit is extracted in the C-Instruction
	// decoding at the beginning of the chip
	Mux16(a=aregout, b=inM, sel=ca, out=aorm);
	ALU(x=dregout, y=aorm, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6,
            zr=zr, ng=ng, out=aluout, out=outM);

	// PC logic
	Not(in=ng, out=nng);
	Not(in=zr, out=nzr);
	And(a=nng, b=nzr, out=pt);

	And(a=j3, b=pt, out=jgt);
	And(a=j1, b=ng, out=jlt);
	And(a=j2, b=zr, out=jeq);
	And(a=j1, b=j2, out=tmp);
	And(a=tmp, b=j3, out=jmp);
	// This covers every jump condition (e.g jge is satisfied by jgt or
	// jeq)
	Or8Way(in[0]=jmp, in[1]=jgt, in[2]=jlt, in[3]=jeq, in[4..7]=false,
	       out=pcload1);
	And(a=pcload1, b=opcode, out=pcload);

	PC(in=aregout, load=pcload, inc=true,
       	   reset=reset, out[0..14]=pc);
}
