// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * Graphic screen library.
 */
class Screen {
    static boolean color;
    static int SCREEN;
    static Array bits;

    /** Initializes the Screen. */
    function void init() {
        var int i, bit;
        let color = true;
        let SCREEN = 16384;

        let bits = Array.new(16);
        let i = 0;
        let bit = 1;
        while (i < 16) {
            let bits[i] = bit;
            let bit = bit + bit;
            let i = i + 1;
        }
        
        return;
    }

    /** Erases the whole screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while (i < 8192) {
            do Memory.poke(SCREEN + i, 0);
            let i = i + 1;
        }
        return;
    }

    /** Sets the color to be used in further draw commands
     *  where white = false, black = true. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x, y) pixel. */
    function void drawPixel(int x, int y) {
        var int offset, xmod16, pixel, currWord;
        let offset = SCREEN + ((y * 32) + (x / 16));
        let xmod16 = x - ((x / 16) * 16);
        let pixel = bits[xmod16];
        let currWord = Memory.peek(offset);
        if (color) {
            let pixel = pixel | currWord;
        }
        else {
            let pixel = (~pixel) & currWord;
        }
        do Memory.poke(offset, pixel);
        return;
    }

    /** Draws a line from (x1, y1) to (x2, y2). */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int tmp, dx, dy, a, b, adyMinusbdx, inc, offset;
        let inc = 1;
        if (x1 = x2) {
            if (y1 < y2) {
                while (y1 < (y2 + 1)) {
                    do Screen.drawPixel(x1, y1);
                    let y1 = y1 + 1;
                }
                return;
            }
            else {
                while (y2 < (y1 + 1)) {
                    do Screen.drawPixel(x2, y2);
                    let y2 = y2 + 1;
                }
                return;
            }
        }
        if (y1 = y2) {
            if (x2 < x1) {
				let tmp = x2;
				let x2 = x1;
				let x1 = tmp;
			}
			while (x1 < (x2 + 1)) {
				let offset = SCREEN + ((y1 * 32) + (x1 / 16));
				if (((x1 - ((x1 / 16) * 16)) = 0) & ((x1 + 15) < x2)) {
					do Memory.poke(offset, color);
					let x1 = x1 + 16;
				}
				else {
					do Screen.drawPixel(x1, y1);
					let x1 = x1 + 1;
				}
			}
                return;
        }
        if (x2 < x1) {
            let tmp = x1;
            let x1 = x2;
            let x2 = tmp;
            let tmp = y1;
            let y1 = y2;
            let y2 = tmp;
        }
        if (y2 < y1) {
            let inc = -1;
        }

        let dx = x2 - x1;
        let dy = Math.abs(y2 - y1);
        
        let a = 0;
        let b = 0;
        let adyMinusbdx = 0;

        while (~((a > dx) | (b > dy))) {
            do Screen.drawPixel(x1 + a, y1 + b);
            if (adyMinusbdx < 0) {
                let a = a + 1;
                let adyMinusbdx = adyMinusbdx + dy;
            }
            else {
                let b = b + inc;
                let adyMinusbdx = adyMinusbdx - dx;
            }
        }
        return;
    }

    /** Draws a filled rectangle where the top left corner
     *  is (x1, y1) and the bottom right corner is (x2, y2). */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while (y1 < (y2 + 1)) {
            do Screen.drawLine(x1,y1,x2,y1);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r around (cx, cy). */
    function void drawCircle(int cx, int cy, int r) {
        var int dy, dx;
        let dy = -r;
        while (dy < (r + 1)) {
            let dx = Math.sqrt((r*r) - (dy*dy));
            do Screen.drawLine(cx + dx, cy + dy, cx - dx, cy + dy);
            let dy = dy + 1;
        }
        return;
    }
}
